n <- 50 # number of time "t"
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
for (j in 1:120) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
e[i,] <- rnorm(120,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 100 # number of time "t"
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
for (j in 1:120) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
e[i,] <- rnorm(120,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 200 # number of time "t"
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
for (j in 1:120) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
e[i,] <- rnorm(120,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 400 # number of time "t"
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
for (j in 1:120) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
e[i,] <- rnorm(120,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 120 # number of data per func
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
fig <- fig %>% add_trace(x = rep(1:n, each=H), y = rep(1:H, times=n), z = c(t(res4_ftfl1_data)),
marker = list(size = 2, color = 'rgba(60, 60, 240, .6)'), type='scatter3d', mode='markers')
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 50 # number of time "t"
H <- 120 # number of data per func
H <- 240 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 480 # number of data per func
H <- 480 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 1200 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
install.packages("refund")
plot(SOI)
fdata = data(SOI)
library(fda)
library(fds)
fdata = data(SOI)
plot(fdata)
plot(SOI)
plot(Moisturespectrum)
plot(aa)
plot(a0)
plot(ao)
plot(malemigration)
oldpar <- par(no.readonly = TRUE)
plot(melanoma[,-1], type="b")
plot(melanoma, type="b")
data(gasoline)
library(refund)
library(fda)
library(fds)
data(gasoline)
force(gasoline)
gas <-  data(gasoline)
class(gas)
View(gasoline)
remove(gas, gasoline)
gas <-  data(gasoline)
force(gasoline)
class(gasoline)
remove(gas, gasoline)
class(gasoline)
gas <- gasoline
remove(gas)
gasoline
gas <- gasoline
gas$octane
gas$NIR
observation_points <- 1:ncol(gas$NIR)
plot(observation_points, gas[1,], type='l', ylim=range(gas$NIR), xlab="observation points", ylab="Value", main="Data")
plot(observation_points, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="observation points", ylab="Value", main="Data")
for (i in 2:nrows(gas$NIR)) {
lines(observation_points, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
for (i in 2:nrow(gas$NIR)) {
lines(observation_points, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
wavelength <- as.numeric(gsub("nm", "", colnames(gas$NIR)))
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis = 5
order = 4
rangeval = create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
remove(rangeval)
basis = create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
plot(basis)
basis$names
fd_obj <- Data2fd(argvals = wavelength, y=as.matrix(gas$NIR), basisobj = basis)
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
fd_obj$coefs
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
nbasis <-  10
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis <-  40
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
nbasis <-  50
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(basis)
class(basis)
class(fd_obj)
plot(basis)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
install.packages("fpca")
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
library(refund)
install.packages("refund", "fda", "fds")
install.packages("refund")
install.packages("fda")
install.packages("fds")
library(refund)
library(fda)
library(fds)
gas <- gasoline
wavelength <- as.numeric(gsub("nm", "", colnames(gas$NIR)))
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis <-  50
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
plot(basis)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
fd_obj$coefs
class(fd_obj$coefs)
class(gas$octane)
gas$octane
new_matrix <- cbind(gas$octane, fd_obj$coefs)
View(new_matrix)
new_matrix <- rbind(gas$octane, fd_obj$coefs)
View(new_matrix)
new_matrix
rownames(new_matrix) <- c("octane", rownames(fd_obj$coefs))
write.csv(new_matrix, "basis_coefs.cv", row.names=TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised.csv")
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
str(denoised_coefs)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
str(denoised_coefs)
class(denoised_coefs)
class(fd_obj$coefs)
denoised_coefs_matrix <- as.matrix(denoised_coefs)
View(denoised_coefs_matrix)
fd_obj$coefs
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
View(denoised_coefs_matrix)
View(denoised_coefs_matrix)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
colnames(denoised_coefs_matrix) <- colnames(fd_obj$coefs)
View(denoised_coefs_matrix)
sample_cols <- sample(ncol(new_matrix, 10))
trainval_matrix <- new_matrix[, sample_cols]
sample_cols <- sample(ncol(new_matrix), 10)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
sample_cols <- sample(ncol(new_matrix), 50)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
sample_cols <- sample(ncol(new_matrix), 50)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
sample_cols <- sample(ncol(new_matrix), 50)
sample_cols <- sort(sample_cols)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
View(denoised_coefs_matrix)
View(trainval_matrix)
colnames(denoised_coefs_matrix) <- colnames(trainval_matrix)
View(denoised_coefs_matrix)
fd_obj$coefs
write.csv(trainval_matrix, "basis_coefs_trainval.csv", row.names=TRUE)
write.csv(test_matrix, "basis_coefs_test.csv", row.names = TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised_test.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
colnames(denoised_coefs_matrix) <- colnames(test_matrix)
View(denoised_coefs_matrix)
fd_trainval <- fd(fd_obj$coefs[, sample_cols], fd_obj$basis)
fd_test <- fd(fd_obj$coefs[, -sample_cols], fd_obj$basis)
fpc(fd_test)
class(fd_test)
fpc_fd_test <- fpc(fd_test)
fpc_fd_test <- pca.fd(jf_test, nharm = 5)
fpc_fd_test <- pca.fd(fd_test, nharm = 5)
class(fpc_fd_test)
octane_trainval <- gas$octane[sample_cols]
View(denoised_coefs_matrix)
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
octane_trainval <- gas$octane[sample_cols]
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
fd_trainval <- fd(fd_obj$coefs[, sample_cols], fd_obj$basis)
fd_test <- fd(fd_obj$coefs[, -sample_cols], fd_obj$basis)
octane_trainval <- gas$octane[sample_cols]
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval)
data2 <- pffrSim(scenario="all")
class(data2)
data2$xlin
class(data2$xlin)
data2 <- pffrSim(scenario="lin")
data2 <- pffrSim(scenario="lin")
data <- data.frame(fd_trainval, octane_trainval)
model <- pffr(fd_trainval ~ octane_trainval)
model <- pffr(fd_trainval ~ octane_trainval, data = list(fd_trainval = fd_trainval. octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval, data = list(fd_trainval = fd_trainval, octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval, method="REML")
