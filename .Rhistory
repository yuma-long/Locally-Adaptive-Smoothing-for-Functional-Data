res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 400 # number of time "t"
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
for (j in 1:120) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=120)
for (i in 1:n) {
e[i,] <- rnorm(120,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 120 # number of data per func
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
fig <- fig %>% add_trace(x = rep(1:n, each=H), y = rep(1:H, times=n), z = c(t(res4_ftfl1_data)),
marker = list(size = 2, color = 'rgba(60, 60, 240, .6)'), type='scatter3d', mode='markers')
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
n <- 50 # number of time "t"
H <- 120 # number of data per func
H <- 240 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 480 # number of data per func
H <- 480 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
H <- 1200 # number of data per func
# scenerio2
true_trend2 <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
for (j in 1:H) {
true_trend2[i,j] <- 40*sin((i+j)/12)
}
}
# generate noise
e <- matrix(0, nrow=n, ncol=H)
for (i in 1:n) {
e[i,] <- rnorm(H,mean=0,sd =sigma)
}
## scenario2
x2 <- true_trend2 + e
start <- proc.time()
res2      <- FTF(fdata(x2), k, lam=lambda_optimal_ftf2 , L=5, 0.0001,0.0001)
end <- proc.time()
print(summary(end - start))
install.packages("refund")
plot(SOI)
fdata = data(SOI)
library(fda)
library(fds)
fdata = data(SOI)
plot(fdata)
plot(SOI)
plot(Moisturespectrum)
plot(aa)
plot(a0)
plot(ao)
plot(malemigration)
oldpar <- par(no.readonly = TRUE)
plot(melanoma[,-1], type="b")
plot(melanoma, type="b")
data(gasoline)
library(refund)
library(fda)
library(fds)
data(gasoline)
force(gasoline)
gas <-  data(gasoline)
class(gas)
View(gasoline)
remove(gas, gasoline)
gas <-  data(gasoline)
force(gasoline)
class(gasoline)
remove(gas, gasoline)
class(gasoline)
gas <- gasoline
remove(gas)
gasoline
gas <- gasoline
gas$octane
gas$NIR
observation_points <- 1:ncol(gas$NIR)
plot(observation_points, gas[1,], type='l', ylim=range(gas$NIR), xlab="observation points", ylab="Value", main="Data")
plot(observation_points, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="observation points", ylab="Value", main="Data")
for (i in 2:nrows(gas$NIR)) {
lines(observation_points, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
for (i in 2:nrow(gas$NIR)) {
lines(observation_points, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
wavelength <- as.numeric(gsub("nm", "", colnames(gas$NIR)))
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis = 5
order = 4
rangeval = create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
remove(rangeval)
basis = create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
plot(basis)
basis$names
fd_obj <- Data2fd(argvals = wavelength, y=as.matrix(gas$NIR), basisobj = basis)
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
fd_obj$coefs
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
nbasis <-  10
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis <-  40
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
nbasis <-  50
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(basis)
class(basis)
class(fd_obj)
plot(basis)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
install.packages("fpca")
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
library(refund)
install.packages("refund", "fda", "fds")
install.packages("refund")
install.packages("fda")
install.packages("fds")
library(refund)
library(fda)
library(fds)
gas <- gasoline
wavelength <- as.numeric(gsub("nm", "", colnames(gas$NIR)))
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
nbasis <-  50
order <-  4
basis <-  create.bspline.basis(rangeval=c(min(wavelength), max(wavelength)), nbasis = nbasis, norder = order)
plot(basis)
fd_obj <- Data2fd(argvals = wavelength, y=t(as.matrix(gas$NIR)), basisobj = basis)
plot(fd_obj)
plot(wavelength, gas$NIR[1,], type='l', ylim=range(gas$NIR), xlab="wave length", ylab="Value", main="Data")
for (i in 2:nrow(gas$NIR)) {
lines(wavelength, gas$NIR[i,], col=rainbow(nrow(gas$NIR))[i])
}
plot(fd_obj)
fd_obj$coefs
class(fd_obj$coefs)
class(gas$octane)
gas$octane
new_matrix <- cbind(gas$octane, fd_obj$coefs)
View(new_matrix)
new_matrix <- rbind(gas$octane, fd_obj$coefs)
View(new_matrix)
new_matrix
rownames(new_matrix) <- c("octane", rownames(fd_obj$coefs))
write.csv(new_matrix, "basis_coefs.cv", row.names=TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised.csv")
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
str(denoised_coefs)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
str(denoised_coefs)
class(denoised_coefs)
class(fd_obj$coefs)
denoised_coefs_matrix <- as.matrix(denoised_coefs)
View(denoised_coefs_matrix)
fd_obj$coefs
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
View(denoised_coefs_matrix)
View(denoised_coefs_matrix)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
colnames(denoised_coefs_matrix) <- colnames(fd_obj$coefs)
View(denoised_coefs_matrix)
sample_cols <- sample(ncol(new_matrix, 10))
trainval_matrix <- new_matrix[, sample_cols]
sample_cols <- sample(ncol(new_matrix), 10)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
sample_cols <- sample(ncol(new_matrix), 50)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
sample_cols <- sample(ncol(new_matrix), 50)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
sample_cols <- sample(ncol(new_matrix), 50)
sample_cols <- sort(sample_cols)
trainval_matrix <- new_matrix[, sample_cols]
test_matrix <- new_matrix[, -sample_cols]
write.csv(trainval_matrix, "basis_coefs.csv", row.names=TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
View(denoised_coefs_matrix)
View(trainval_matrix)
colnames(denoised_coefs_matrix) <- colnames(trainval_matrix)
View(denoised_coefs_matrix)
fd_obj$coefs
write.csv(trainval_matrix, "basis_coefs_trainval.csv", row.names=TRUE)
write.csv(test_matrix, "basis_coefs_test.csv", row.names = TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised_test.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs)
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
colnames(denoised_coefs_matrix) <- colnames(test_matrix)
View(denoised_coefs_matrix)
fd_trainval <- fd(fd_obj$coefs[, sample_cols], fd_obj$basis)
fd_test <- fd(fd_obj$coefs[, -sample_cols], fd_obj$basis)
fpc(fd_test)
class(fd_test)
fpc_fd_test <- fpc(fd_test)
fpc_fd_test <- pca.fd(jf_test, nharm = 5)
fpc_fd_test <- pca.fd(fd_test, nharm = 5)
class(fpc_fd_test)
octane_trainval <- gas$octane[sample_cols]
View(denoised_coefs_matrix)
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
octane_trainval <- gas$octane[sample_cols]
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
fd_trainval <- fd(fd_obj$coefs[, sample_cols], fd_obj$basis)
fd_test <- fd(fd_obj$coefs[, -sample_cols], fd_obj$basis)
octane_trainval <- gas$octane[sample_cols]
model <- pffr(fd_trainval ~ octane_trainval, data = list(octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval)
data2 <- pffrSim(scenario="all")
class(data2)
data2$xlin
class(data2$xlin)
data2 <- pffrSim(scenario="lin")
data2 <- pffrSim(scenario="lin")
data <- data.frame(fd_trainval, octane_trainval)
model <- pffr(fd_trainval ~ octane_trainval)
model <- pffr(fd_trainval ~ octane_trainval, data = list(fd_trainval = fd_trainval. octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval, data = list(fd_trainval = fd_trainval, octane_trainval = octane_trainval))
model <- pffr(fd_trainval ~ octane_trainval, method="REML")
library(refund)
library(fda)
library(fds)
model <- pffr(fd_trainval ~ octane_trainval, method="REML")
modmat <- cbind(1, octane_trainval)
View(modmat)
model <- fosr(fdobj = fd_trainval, X = modmat)
octane_test <- gas$octane[-sample_cols]
predicted_functions = predict(model, octane_test)
predicted_functions = predict(model,newdata = octane_test)
model <- fosr(fdobj = fd_trainval, X = modmat)
model <- pffr(fd_trainval ~ octane_trainval)
model <- pffr(fd_trainval ~ octane_trainval, algorithm = "gam", method = "MERL")
fd_trainval <- fd(fd_obj$coefs[, sample_cols], fd_obj$basis)
fd_trainval$coefs
data1 <- pffrSim(scenario="lin", n = 40)
class(gasoline)
class(gasoline$NIR)
y <- gasoline$octane
X <- gasoline$NIR
model <- pffr(y ~ X, data = gasoline)
data(package="refund")
find.package("refund")
pffr
model <- pffr(fd_trainval ~ octane_trainval, algorithm = "gam")
model <- pffr(fd_trainval ~ octane_trainval, yind = wavelength, algorithm = "gam")
wavelength <- as.numeric(gsub("nm", "", colnames(gas$NIR)))
model <- pffr(fd_trainval ~ octane_trainval, yind = wavelength, algorithm = "gam")
data1 <- pffrSim(scenario="all", n = 100)
t <- attr(data1, "yindex")
s <- attr(data1, "xindex")
m2 <- pffr(Y ~  ff(X1, xind=s) + #linear function-on-function
xlin + #varying coefficient term
c(te(xte1, xte2)) + #bivariate smooth term in xte1 & xte2, const. over Y-index
s(xsmoo) + #smooth effect of xsmoo varying over Y-index
c(xconst), # linear effect of xconst constant over Y-index
yind=t,
data=data2)
m2 <- pffr(Y ~  ff(X1, xind=s) + #linear function-on-function
xlin + #varying coefficient term
c(te(xte1, xte2)) + #bivariate smooth term in xte1 & xte2, const. over Y-index
s(xsmoo) + #smooth effect of xsmoo varying over Y-index
c(xconst), # linear effect of xconst constant over Y-index
yind=t,
data=data11)
m2 <- pffr(Y ~  ff(X1, xind=s) + #linear function-on-function
xlin + #varying coefficient term
c(te(xte1, xte2)) + #bivariate smooth term in xte1 & xte2, const. over Y-index
s(xsmoo) + #smooth effect of xsmoo varying over Y-index
c(xconst), # linear effect of xconst constant over Y-index
yind=t,
data=data1)
t
class(t)
gasoline$NIR
model <- pffr(gasoline$NIR ~ gasoline$octane, yind = wavelength)
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = gasoline$NIR, octane = gasoline$octane))
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = gasoline$NIR, octane = gasoline$octane),
bs_yindex=list(bs="ps", k=50, m=c(2,1)))
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = gasoline$NIR, octane = gasoline$octane),
bs.yindex=list(bs="ps", k=50, m=c(2,1)))
train_data <- gasoline[, sample_cols]
train_data <- gasoline[sample_cols]
NIR_trainval <- gas$NIR[sample_cols]
class(gas)
trainval_data <- data.frame(NIR_trainval, octane_trainval)
trainval_data <- data.frame(NIR = gas$NIR[sample_cols], octane = gas$octane[sample_cols])
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = trainval_data$NIR, octane = trainval_data$octane),
bs.yindex=list(bs="ps", k=50, m=c(2,1)))
class(gas$NIR)
View(denoised_coefs_matrix)
gas$NIR
rownames(gas$NIR[sample_cols])
# Regression (Default) ----------------------------------------------------
gas$NIR[sample_cols]
rownames(gas$NIR[, sample_cols])
colnames(gas$NIR[, sample_cols])
trainval_data <- data.frame(NIR = gas$NIR[, sample_cols], octane = gas$octane[sample_cols])
gas$NIR[, sample_cols]
gas$octane[sample_cols]
class(gas$octane[sample_cols])
gas$NIR[sample_cols, ]
trainval_data <- data.frame(NIR = gas$NIR[sample_cols, ], octane = gas$octane[sample_cols])
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = trainval_data$NIR, octane = trainval_data$octane),
bs.yindex=list(bs="ps", k=50, m=c(2,1)))
install.packages("caret")
trainIndex <- createDataPartition(gasoline$octane, p = 0.8)
library(caret)
trainIndex <- createDataPartition(gasoline$octane, p = 0.8)
trainSet <- gasoline[trainIndex]
trainSet <- gasoline[trainIndex,]
trainIndex <- createDataPartition(gasoline$octane, p = 0.8, list = FALSE)
trainSet <- gasoline[trainIndex,]
testSet <- gasoline[-trainIndex,]
model <- pffr(NIR ~ octane, yind = wavelength, data = list(NIR = trainSet$NIR, octane = trainSet$octane),
bs.yindex=list(bs="ps", k=50, m=c(2,1)))
prediction_result <- predict(model, testSet)
View(prediction_result)
trainval_matrix <- new_matrix[, trainSet]
trainval_matrix <- new_matrix[, trainIndex]
test_matrix <- new_matrix[, -trainIndex]
write.csv(trainval_matrix, "basis_coefs_trainval.csv", row.names=TRUE)
write.csv(test_matrix, "basis_coefs_test.csv", row.names = TRUE)
denoised_coefs <- read.csv("basis_coefs_denoised_test.csv", header=TRUE, row.names=1)
denoised_coefs <- data.frame(lapply(denoised_coefs, as.numeric))
denoised_coefs_matrix <- as.matrix(denoised_coefs) # denoised coefficient matrix without octane value
rownames(denoised_coefs_matrix) <- rownames(fd_obj$coefs)
colnames(denoised_coefs_matrix) <- colnames(test_matrix)
View(denoised_coefs_matrix)
remove(fd_test, fd_trainval)
testSet
class(testSet)
prediction_result_linear <- predict(model, testSet)
View(prediction_result_linear)
class(prediction_result_linear)
remove(prediction_result)
rownames(prediction_result_linear) <- rownames(testSet)
View(prediction_result_linear)
class(fd_obj)
fd_obj$coefs
fd_obj_cp <- fd_obj
fd_obj_cp$coefs <- denoised_coefs_matrix
View(fd_obj_cp)
View(fd_obj)
View(fd_obj_cp)
prediction_result_tv <- eval.fd(wavelength, fd_obj_cp)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
prediction_result_tv <- t(eval.fd(wavelength, fd_obj_cp))
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
View(prediction_result_linear)
View(prediction_result_tv)
testSet
testSet$NIR
class(testSet$NIR)
linear_dif <- testSet$NIR - prediction_result_linear
tv_dif <- testSet$NIR - prediction_result_tv
sum_sq_dif <- sum(linear_dif^2)
sum_sq_tv_dif <- sum(tv_dif^2)
